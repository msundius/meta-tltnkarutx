--- a/drivers/staging/mt29f_spinand/Kconfig
+++ b/drivers/staging/mt29f_spinand/Kconfig
@@ -14,3 +14,13 @@
 	help
 	  Internal ECC.
 	  Enables Hardware ECC support for Micron SPI NAND.
+
+config MTD_SPINAND_GIGADEVICE
+	tristate "SPINAND Devcie Support for Gigadevice "
+	depends on MTD_SPINAND_MT29F
+	help
+	   This enables support for accessing Gigadevice SPI NAND flash
+	   devices.
+	   If you have Gigadevice SPI NAND chip say yes.
+
+	   If unsure, say no here.
--- a/drivers/staging/mt29f_spinand/Makefile
+++ b/drivers/staging/mt29f_spinand/Makefile
@@ -1 +1,2 @@
 obj-$(CONFIG_MTD_SPINAND_MT29F) += mt29f_spinand.o
+obj-$(CONFIG_MTD_SPINAND_GIGADEVICE)  += giga_spinand.o
--- a/drivers/staging/mt29f_spinand/mt29f_spinand.h
+++ b/drivers/staging/mt29f_spinand/mt29f_spinand.h
@@ -36,6 +36,7 @@
 #define CMD_RESET			0xff
 #define CMD_READ_REG			0x0f
 #define CMD_WRITE_REG			0x1f
+#define CMD_DIE_SELECT			0xC2
 
 /* feature/ status reg */
 #define REG_BLOCK_LOCK			0xa0
@@ -58,6 +59,18 @@
 #define STATUS_ECC_ERROR		BIT(5)
 #define STATUS_ECC_RESERVED		(BIT(5) | BIT(4))
 
+#define STATUS_ECC_MASK_GIGA		0x70
+#define STATUS_ECC_ERROR_GIGA		0x70
+#define STATUS_ECC_BF_THRESHOLD_GIGA	0x40
+#define STATUS_ECC_MASK_MACRONIX	0x30
+#define STATUS_ECC_ERROR_MACRONIX	0x20
+#define SPINAND_ECC_ERROR		0x1
+#define SPINAND_ECC_CORRECTED		0x2
+
+#define STATUS_ECC_MASK_XTX		0x3C
+#define STATUS_ECC_ERROR_XTX		0x20
+#define STATUS_ECC_BF_THRESHOLD_XTX	0x10
+
 /*ECC enable defines*/
 #define OTP_ECC_MASK			0x10
 #define OTP_ECC_OFF			0
@@ -77,11 +90,6 @@
 #define BL_1_64_LOCKED     0x08
 #define BL_ALL_UNLOCKED    0
 
-struct spinand_info {
-	struct spi_device *spi;
-	void *priv;
-};
-
 struct spinand_state {
 	u32	col;
 	u32	row;
@@ -100,6 +108,34 @@
 	u8		*rx_buf;	/* Rx buf */
 };
 
+struct spinand_ops {
+	u8   maf_id;
+	u8   no_of_dies;
+	u16   dev_id;
+	int   prev_die_id;
+	u32   pages_per_die;
+	void (*spinand_set_defaults)(struct spi_device *spi_nand);
+	void (*spinand_read_cmd)(struct spinand_cmd *cmd, u32 page_id);
+	void (*spinand_read_data)(struct spinand_cmd *cmd, u16 column,
+				  u32 page_id);
+	void (*spinand_write_cmd)(struct spinand_cmd *cmd, u32 page_id);
+	void (*spinand_write_data)(struct spinand_cmd *cmd, u16 column,
+				   u32 page_id);
+	void (*spinand_erase_blk)(struct spinand_cmd *cmd, u32 page_id);
+	int (*spinand_parse_id)(struct spi_device *spi_nand,
+				struct spinand_ops *ops, u8 *nand_id, u8 *id);
+	int (*spinand_verify_ecc)(u8 status);
+	int (*spinand_die_select)(struct spi_device *spi_nand,
+				  struct spinand_ops *dev_ops, u8 die_id);
+};
+
+struct spinand_info {
+	struct nand_ecclayout *ecclayout;
+	struct spi_device *spi;
+	void *priv;
+	struct spinand_ops *dev_ops;
+};
+
 int spinand_mtd(struct mtd_info *mtd);
 void spinand_mtd_release(struct mtd_info *mtd);
 
--- a/drivers/staging/mt29f_spinand/mt29f_spinand.c
+++ b/drivers/staging/mt29f_spinand/mt29f_spinand.c
@@ -22,9 +22,275 @@
 #include <linux/spi/spi.h>
 
 #include "mt29f_spinand.h"
-
-#define BUFSIZE (10 * 64 * 2048)
-#define CACHE_BUF 2112
+#include "giga_spinand.h"
+
+#define BUFSIZE (10 * 64 * 4096)
+#define CACHE_BUF 4352
+
+static int spinand_disable_ecc(struct spi_device *spi_nand);
+static int spinand_lock_block(struct spi_device *spi_nand, u8 lock);
+
+struct spinand_ops spinand_dev[] = {
+#ifdef CONFIG_MTD_SPINAND_GIGADEVICE
+	{
+		NAND_MFR_GIGA,
+		1,
+		0xd2,
+		INT_MAX,
+		0x20000,
+		gigadevice_set_defaults,
+		gigadevice_read_cmd,
+		winbond_read_data,
+		gigadevice_write_cmd,
+		gigadevice_write_data,
+		gigadevice_erase_blk,
+		gigadevice_2G_parse_id,
+		macronix_verify_ecc,
+		NULL,
+	},
+	{
+		NAND_MFR_GIGA,
+		1,
+		0xb1,
+		INT_MAX,
+		0x10000,
+		gigadevice_set_defaults,
+		gigadevice_read_cmd,
+		gigadevice_read_data,
+		gigadevice_write_cmd,
+		gigadevice_write_data,
+		gigadevice_erase_blk,
+		gigadevice_parse_id,
+		gigadevice_verify_ecc,
+		NULL,
+	},
+	{
+		NAND_MFR_GIGA,
+		1,
+		0xb4,
+		INT_MAX,
+		0x20000,
+		gigadevice_set_defaults_512mb,
+		gigadevice_read_cmd,
+		gigadevice_read_data,
+		gigadevice_write_cmd,
+		gigadevice_write_data,
+		gigadevice_erase_blk,
+		gigadevice_parse_id,
+		gigadevice_verify_ecc,
+		NULL,
+	},
+	{
+		NAND_MFR_GIGA,
+		1,
+		0xa1,
+		INT_MAX,
+		0x10000,
+		gigadevice_set_defaults,
+		gigadevice_read_cmd,
+		gigadevice_read_data,
+		gigadevice_write_cmd,
+		gigadevice_write_data,
+		gigadevice_erase_blk,
+		gigadevice_parse_id,
+		gigadevice_verify_ecc,
+		NULL,
+	},
+	{
+		NAND_MFR_ATO,
+		1,
+		0x12,
+		INT_MAX,
+		0x10000,
+		gigadevice_set_defaults,
+		gigadevice_read_cmd,
+		gigadevice_read_data,
+		gigadevice_write_cmd,
+		gigadevice_write_data,
+		gigadevice_erase_blk,
+		gigadevice_parse_id,
+		dummy_verify_ecc,
+		NULL,
+	},
+#endif
+	{
+		NAND_MFR_MACRONIX,
+		1,
+		0x12,
+		INT_MAX,
+		0x10000,
+		gigadevice_set_defaults,
+		gigadevice_read_cmd,
+		macronix_read_data,
+		gigadevice_write_cmd,
+		macronix_write_data,
+		gigadevice_erase_blk,
+		macronix_parse_id,
+		macronix_verify_ecc,
+		NULL,
+	},
+	{
+		NAND_MFR_WINBOND,
+		1,
+		0xaa,
+		INT_MAX,
+		0x10000,
+		gigadevice_set_defaults,
+		gigadevice_read_cmd,
+		winbond_read_data,
+		gigadevice_write_cmd,
+		winbond_write_data,
+		gigadevice_erase_blk,
+		winbond_parse_id,
+		macronix_verify_ecc,
+		NULL,
+	},
+	{
+		NAND_MFR_WINBOND,
+		2,
+		0xab,
+		INT_MAX,
+		0x10000,
+		gigadevice_set_defaults,
+		gigadevice_read_cmd,
+		winbond_read_data,
+		gigadevice_write_cmd,
+		winbond_write_data,
+		gigadevice_erase_blk,
+		winbond_parse_id,
+		macronix_verify_ecc,
+		winbond_die_select,
+	},
+	{
+		NAND_MFR_XTX,
+		1,
+		0xe2,
+		INT_MAX,
+		0x20000,
+		gigadevice_set_defaults,
+		gigadevice_read_cmd,
+		macronix_read_data,
+		gigadevice_write_cmd,
+		gigadevice_write_data,
+		gigadevice_erase_blk,
+		xtx_parse_id,
+		xtx_verify_ecc,
+		NULL,
+	},
+	{
+		NAND_MFR_FUDAN,
+		1,
+		0xf2,
+		INT_MAX,
+		0x20000,
+		gigadevice_set_defaults,
+		gigadevice_read_cmd,
+		macronix_read_data,
+		gigadevice_write_cmd,
+		gigadevice_write_data,
+		gigadevice_erase_blk,
+		fudan_parse_id,
+		gigadevice_verify_ecc,
+		NULL,
+	},
+	{ },
+};
+
+void mt29f_read_page_to_cache(struct spinand_cmd *cmd, u32 page_id)
+{
+	cmd->addr[1] = (u8)((page_id & 0xff00) >> 8);
+	cmd->addr[2] = (u8)(page_id & 0x00ff);
+}
+
+void mt29f_read_from_cache(struct spinand_cmd *cmd, u16 column, u32 page_id)
+{
+	cmd->addr[0] = (u8)((column & 0xff00) >> 8);
+	cmd->addr[0] |= (u8)(((page_id >> 6) & 0x1) << 4);
+	cmd->addr[1] = (u8)(column & 0x00ff);
+	cmd->addr[2] = (u8)(0xff);
+}
+
+void mt29f_program_data_to_cache(struct spinand_cmd *cmd, u16 column,
+				 u32 page_id)
+{
+	cmd->addr[0] = (u8)((column & 0xff00) >> 8);
+	cmd->addr[0] |= (u8)(((page_id >> 6) & 0x1) << 4);
+	cmd->addr[1] = (u8)(column & 0x00ff);
+}
+
+void mt29f_program_execute(struct spinand_cmd *cmd, u32 column)
+{
+	cmd->addr[1] = (u8)((column & 0xff00) >> 8);
+	cmd->addr[2] = (u8)(column & 0x00ff);
+}
+
+void mt29f_erase_block_erase(struct spinand_cmd *cmd, u32 page_id)
+{
+	cmd->addr[1] = (u8)((page_id & 0xff00) >> 8);
+	cmd->addr[2] = (u8)(page_id & 0x00ff);
+}
+
+int mt29f_verify_ecc(u8 status)
+{
+	int ecc_status = (status & STATUS_ECC_MASK);
+
+	if (ecc_status == STATUS_ECC_ERROR)
+		return SPINAND_ECC_ERROR;
+	else if (ecc_status == STATUS_ECC_1BIT_CORRECTED)
+		return SPINAND_ECC_CORRECTED;
+	else
+		return 0;
+}
+
+struct spinand_ops mt29f_spinand_ops = {
+		NAND_MFR_MICRON,
+		1,
+		0x0,
+		INT_MAX,
+		0x0,
+		NULL,
+		mt29f_read_page_to_cache,
+		mt29f_read_from_cache,
+		mt29f_program_execute,
+		mt29f_program_data_to_cache,
+		mt29f_erase_block_erase,
+		NULL,
+		mt29f_verify_ecc,
+		NULL,
+};
+
+static inline struct spinand_ops *get_dev_ops(struct spi_device *spi_nand)
+{
+	struct mtd_info *mtd = (struct mtd_info *)dev_get_drvdata
+							(&spi_nand->dev);
+	struct nand_chip *chip = mtd_to_nand(mtd);
+	struct spinand_info *info = nand_get_controller_data(chip);
+	struct spinand_ops *dev_ops = info->dev_ops;
+
+	return dev_ops;
+}
+
+void spinand_parse_id(struct spi_device *spi_nand, u8 *nand_id, u8 *id)
+{
+	int tmp;
+	struct spinand_ops *tmp_ops;
+	struct mtd_info *mtd = (struct mtd_info *)
+					dev_get_drvdata(&spi_nand->dev);
+	struct nand_chip *chip = mtd_to_nand(mtd);
+	struct spinand_info *info = nand_get_controller_data(chip);
+
+	for (tmp = 0; tmp < ARRAY_SIZE(spinand_dev) - 1; tmp++) {
+		tmp_ops = &spinand_dev[tmp];
+			if (tmp_ops->spinand_parse_id(spi_nand, tmp_ops,
+						      nand_id, id) == 0) {
+				info->dev_ops = &spinand_dev[tmp];
+				info->dev_ops->spinand_set_defaults(spi_nand);
+				return;
+			}
+	}
+	info->dev_ops = &mt29f_spinand_ops;
+}
+
 /*
  * OOB area specification layout:  Total 32 available free bytes.
  */
@@ -119,6 +385,60 @@
 	return spi_sync(spi, &message);
 }
 
+static int get_die_id(struct spinand_ops *dev_ops, u32 page_id)
+{
+	u64 page_id64 = page_id;
+	do_div(page_id64, dev_ops->pages_per_die);
+	page_id = (u32)page_id64;
+	if (page_id > dev_ops->no_of_dies) {
+		pr_info("invalid die id : %d\n", page_id);
+		return -EINVAL;
+	}
+
+	return page_id;
+}
+
+/*
+ * winbond_die_select - send command 0xc2 to select die
+ * Description:
+ *   Die select function.
+ *   Die ID is given as either 0 or 1 to select die 0 or 1
+ *   respectively
+ */
+int winbond_die_select(struct spi_device *spi_nand,
+		       struct spinand_ops *dev_ops, u8 die_id)
+{
+	int retval;
+	struct spinand_cmd cmd = {0};
+
+	if (die_id < 0)
+		return -1;
+
+	if (dev_ops->prev_die_id == die_id)
+		return 0;
+
+	cmd.cmd = CMD_DIE_SELECT,
+	cmd.n_addr = 1,
+	cmd.addr[0] = die_id,
+	retval = spinand_cmd(spi_nand, &cmd);
+	if (retval < 0)
+		dev_err(&spi_nand->dev, "error %d in die select\n", retval);
+	else
+		dev_ops->prev_die_id = die_id;
+
+	return retval;
+}
+
+static inline int select_die(struct spi_device *spi_nand,
+			     struct spinand_ops *dev_ops, int die)
+{
+	if (!dev_ops->spinand_die_select)
+		return 0;
+
+	return dev_ops->spinand_die_select(spi_nand,
+		dev_ops, die);
+}
+
 /**
  * spinand_read_id - Read SPI Nand ID
  * Description:
@@ -127,8 +447,10 @@
 static int spinand_read_id(struct spi_device *spi_nand, u8 *id)
 {
 	int retval;
+	int i;
 	u8 nand_id[3];
 	struct spinand_cmd cmd = {0};
+	struct spinand_ops *dev_ops;
 
 	cmd.cmd = CMD_READ_ID;
 	cmd.n_rx = 3;
@@ -141,6 +463,20 @@
 	}
 	id[0] = nand_id[1];
 	id[1] = nand_id[2];
+	spinand_parse_id(spi_nand, nand_id, id);
+	dev_ops = get_dev_ops(spi_nand);
+	if (dev_ops->spinand_die_select) {
+		for (i = 0; i < dev_ops->no_of_dies; i++) {
+			retval = dev_ops->spinand_die_select(spi_nand,
+						dev_ops, i);
+			if (retval < 0)
+				return retval;
+			spinand_lock_block(spi_nand, BL_ALL_UNLOCKED);
+			if (spinand_disable_ecc(spi_nand) < 0)
+				pr_info("%s: disable ecc failed!\n", __func__);
+		}
+	}
+
 	return retval;
 }
 
@@ -256,19 +592,31 @@
 static int spinand_enable_ecc(struct spi_device *spi_nand)
 {
 	int retval;
+	int i;
+	struct spinand_ops *dev_ops = get_dev_ops(spi_nand);
 	u8 otp = 0;
 
-	retval = spinand_get_otp(spi_nand, &otp);
-	if (retval < 0)
-		return retval;
-
-	if ((otp & OTP_ECC_MASK) == OTP_ECC_MASK)
-		return 0;
-	otp |= OTP_ECC_MASK;
-	retval = spinand_set_otp(spi_nand, &otp);
-	if (retval < 0)
-		return retval;
-	return spinand_get_otp(spi_nand, &otp);
+	for (i = 0; i < dev_ops->no_of_dies; i++) {
+		retval = select_die(spi_nand, dev_ops, i);
+		if (retval < 0)
+			return retval;
+
+		retval = spinand_get_otp(spi_nand, &otp);
+		if (retval < 0)
+			return retval;
+
+		if ((otp & OTP_ECC_MASK) != OTP_ECC_MASK) {
+			otp |= OTP_ECC_MASK;
+			retval = spinand_set_otp(spi_nand, &otp);
+			if (retval < 0)
+				return retval;
+			retval = spinand_get_otp(spi_nand, &otp);
+			if (retval < 0)
+				return retval;
+		}
+	}
+
+	return 0;
 }
 #endif
 
@@ -292,39 +640,54 @@
 }
 
 /**
- * spinand_write_enable - send command 0x06 to enable write or erase the
+ * spinand_write_config- send command 0x06 to enable write or erase the
+ * Nand cells or send command 0x04 to disable write or erase the
  * Nand cells
+ *
  * Description:
  *   Before write and erase the Nand cells, the write enable has to be set.
  *   After the write or erase, the write enable bit is automatically
  *   cleared (status register bit 2)
  *   Set the bit 2 of the status register has the same effect
- */
-static int spinand_write_enable(struct spi_device *spi_nand)
-{
+ *   After write and erase the Nand cells, the write enable has to be disabled.
+ */
+static int spinand_write_config(struct spi_device *spi_nand, u8 opcode)
+{
+	int ret = 0;
+	int i;
+	struct spinand_ops *dev_ops = get_dev_ops(spi_nand);
 	struct spinand_cmd cmd = {0};
 
-	cmd.cmd = CMD_WR_ENABLE;
-	return spinand_cmd(spi_nand, &cmd);
+	for (i = 0; i < dev_ops->no_of_dies; i++) {
+		ret = select_die(spi_nand, dev_ops, i);
+		if (ret < 0)
+			return ret;
+		cmd.cmd = opcode;
+		ret = spinand_cmd(spi_nand, &cmd);
+		if (ret < 0)
+			return ret;
+	}
+
+	return ret;
 }
 
 static int spinand_read_page_to_cache(struct spi_device *spi_nand, u16 page_id)
 {
 	struct spinand_cmd cmd = {0};
-	u16 row;
-
-	row = page_id;
+	struct spinand_ops *dev_ops = get_dev_ops(spi_nand);
+
+	select_die(spi_nand, dev_ops, get_die_id(dev_ops, page_id));
+
 	cmd.cmd = CMD_READ;
 	cmd.n_addr = 3;
-	cmd.addr[1] = (u8)((row & 0xff00) >> 8);
-	cmd.addr[2] = (u8)(row & 0x00ff);
+	dev_ops->spinand_read_cmd(&cmd, page_id);
 
 	return spinand_cmd(spi_nand, &cmd);
 }
 
-/**
- * spinand_read_from_cache - send command 0x03 to read out the data from the
- * cache register (2112 bytes max)
+/*
+ * spinand_read_from_cache- send command 0x03 to read out the data from the
+ * cache register(2112 bytes max)
  * Description:
  *   The read can specify 1 to 2112 bytes of data read at the corresponding
  *   locations.
@@ -335,14 +698,12 @@
 {
 	struct spinand_cmd cmd = {0};
 	u16 column;
+	struct spinand_ops *dev_ops = get_dev_ops(spi_nand);
 
 	column = byte_id;
 	cmd.cmd = CMD_READ_RDM;
 	cmd.n_addr = 3;
-	cmd.addr[0] = (u8)((column & 0xff00) >> 8);
-	cmd.addr[0] |= (u8)(((page_id >> 6) & 0x1) << 4);
-	cmd.addr[1] = (u8)(column & 0x00ff);
-	cmd.addr[2] = (u8)(0xff);
+	dev_ops->spinand_read_data(&cmd, column, page_id);
 	cmd.n_dummy = 0;
 	cmd.n_rx = len;
 	cmd.rx_buf = rbuf;
@@ -350,22 +711,25 @@
 	return spinand_cmd(spi_nand, &cmd);
 }
 
-/**
- * spinand_read_page - read a page
+/*
+ * spinand_read_page-to read a page with:
  * @page_id: the physical page number
  * @offset:  the location from 0 to 2111
  * @len:     number of bytes to read
  * @rbuf:    read buffer to hold @len bytes
  *
  * Description:
- *   The read includes two commands to the Nand - 0x13 and 0x03 commands
+ *   The read includes two commands to the Nand: 0x13 and 0x03 commands
  *   Poll to read status to wait for tRD time.
  */
 static int spinand_read_page(struct spi_device *spi_nand, u16 page_id,
-			     u16 offset, u16 len, u8 *rbuf)
-{
-	int ret;
+			     u32 offset, u32 len, u8 *rbuf)
+{
+	int ret, ecc_error = 0, ecc_corrected = 0;
 	u8 status = 0;
+	struct spinand_ops *dev_ops = get_dev_ops(spi_nand);
+	struct mtd_info *mtd = (struct mtd_info *)
+					dev_get_drvdata(&spi_nand->dev);
 
 #ifdef CONFIG_MTD_SPINAND_ONDIEECC
 	if (enable_read_hw_ecc) {
@@ -389,10 +753,15 @@
 		}
 
 		if ((status & STATUS_OIP_MASK) == STATUS_READY) {
-			if ((status & STATUS_ECC_MASK) == STATUS_ECC_ERROR) {
+			ret = dev_ops->spinand_verify_ecc(status);
+			if (ret == SPINAND_ECC_ERROR) {
 				dev_err(&spi_nand->dev, "ecc error, page=%d\n",
 					page_id);
-				return 0;
+				mtd->ecc_stats.failed++;
+				ecc_error = 1;
+			} else if (ret == SPINAND_ECC_CORRECTED) {
+				mtd->ecc_stats.corrected++;
+				ecc_corrected = 1;
 			}
 			break;
 		}
@@ -414,6 +783,11 @@
 		enable_read_hw_ecc = 0;
 	}
 #endif
+	if (ecc_error)
+		ret = -EBADMSG;
+	else if (ecc_corrected)
+		ret = -EUCLEAN;
+
 	return ret;
 }
 
@@ -434,15 +808,16 @@
 {
 	struct spinand_cmd cmd = {0};
 	u16 column;
+	struct spinand_ops *dev_ops = get_dev_ops(spi_nand);
+
+	select_die(spi_nand, dev_ops, get_die_id(dev_ops, page_id));
 
 	column = byte_id;
 	cmd.cmd = CMD_PROG_PAGE_CLRCACHE;
 	cmd.n_addr = 2;
-	cmd.addr[0] = (u8)((column & 0xff00) >> 8);
-	cmd.addr[0] |= (u8)(((page_id >> 6) & 0x1) << 4);
-	cmd.addr[1] = (u8)(column & 0x00ff);
+	dev_ops->spinand_write_data(&cmd, column, page_id);
 	cmd.n_tx = len;
-	cmd.tx_buf = wbuf;
+	cmd.tx_buf = wbuf + column;
 
 	return spinand_cmd(spi_nand, &cmd);
 }
@@ -459,13 +834,13 @@
 static int spinand_program_execute(struct spi_device *spi_nand, u16 page_id)
 {
 	struct spinand_cmd cmd = {0};
-	u16 row;
-
-	row = page_id;
+	struct spinand_ops *dev_ops = get_dev_ops(spi_nand);
+
+	select_die(spi_nand, dev_ops, get_die_id(dev_ops, page_id));
+
 	cmd.cmd = CMD_PROG_PAGE_EXC;
 	cmd.n_addr = 3;
-	cmd.addr[1] = (u8)((row & 0xff00) >> 8);
-	cmd.addr[2] = (u8)(row & 0x00ff);
+	dev_ops->spinand_write_cmd(&cmd, page_id);
 
 	return spinand_cmd(spi_nand, &cmd);
 }
@@ -486,40 +861,34 @@
 static int spinand_program_page(struct spi_device *spi_nand,
 				u16 page_id, u16 offset, u16 len, u8 *buf)
 {
-	int retval;
+	int retval = 0;
 	u8 status = 0;
 	u8 *wbuf;
 #ifdef CONFIG_MTD_SPINAND_ONDIEECC
-	unsigned int i, j;
-
+
+	enable_read_hw_ecc = 0;
 	wbuf = kzalloc(CACHE_BUF, GFP_KERNEL);
 	if (!wbuf)
 		return -ENOMEM;
 
-	enable_read_hw_ecc = 1;
-	retval = spinand_read_page(spi_nand, page_id, 0, CACHE_BUF, wbuf);
-	if (retval < 0) {
-		dev_err(&spi_nand->dev, "ecc error on read page!!!\n");
-		goto cleanup;
-	}
-
-	for (i = offset, j = 0; i < len; i++, j++)
-		wbuf[i] &= buf[j];
+	spinand_read_page(spi_nand, page_id, 0, CACHE_BUF, wbuf);
+
+	memcpy(wbuf + offset, buf, len);
 
 	if (enable_hw_ecc) {
 		retval = spinand_enable_ecc(spi_nand);
 		if (retval < 0) {
 			dev_err(&spi_nand->dev, "enable ecc failed!!\n");
-			goto cleanup;
+			goto exit;
 		}
 	}
 #else
 	wbuf = buf;
 #endif
-	retval = spinand_write_enable(spi_nand);
+	retval = spinand_write_config(spi_nand, CMD_WR_ENABLE);
 	if (retval < 0) {
 		dev_err(&spi_nand->dev, "write enable failed!!\n");
-		goto cleanup;
+		goto exit;
 	}
 	if (wait_till_ready(spi_nand))
 		dev_err(&spi_nand->dev, "wait timedout!!!\n");
@@ -527,16 +896,18 @@
 	retval = spinand_program_data_to_cache(spi_nand, page_id,
 					       offset, len, wbuf);
 	if (retval < 0)
-		goto cleanup;
+		goto exit;
+
 	retval = spinand_program_execute(spi_nand, page_id);
 	if (retval < 0)
-		goto cleanup;
+		goto exit;
+
 	while (1) {
 		retval = spinand_read_status(spi_nand, &status);
 		if (retval < 0) {
 			dev_err(&spi_nand->dev,
 				"error %d reading status register\n", retval);
-			goto cleanup;
+			goto exit;
 		}
 
 		if ((status & STATUS_OIP_MASK) == STATUS_READY) {
@@ -544,7 +915,7 @@
 				dev_err(&spi_nand->dev,
 					"program error, page %d\n", page_id);
 				retval = -1;
-				goto cleanup;
+				goto exit;
 			}
 			break;
 		}
@@ -554,15 +925,20 @@
 		retval = spinand_disable_ecc(spi_nand);
 		if (retval < 0) {
 			dev_err(&spi_nand->dev, "disable ecc failed!!\n");
-			goto cleanup;
+			goto exit;
 		}
 		enable_hw_ecc = 0;
 	}
-	kfree(wbuf);
 #endif
-	return 0;
-
-cleanup:
+	retval = spinand_write_config(spi_nand, CMD_WR_DISABLE);
+	if (retval < 0) {
+		dev_err(&spi_nand->dev, "write disable failed!!\n");
+		goto exit;
+	}
+	if (wait_till_ready(spi_nand))
+		dev_err(&spi_nand->dev, "wait timedout!!!\n");
+
+exit:
 #ifdef CONFIG_MTD_SPINAND_ONDIEECC
 	kfree(wbuf);
 #endif
@@ -582,13 +958,13 @@
 static int spinand_erase_block_erase(struct spi_device *spi_nand, u16 block_id)
 {
 	struct spinand_cmd cmd = {0};
-	u16 row;
-
-	row = block_id;
+	struct spinand_ops *dev_ops = get_dev_ops(spi_nand);
+
+	select_die(spi_nand, dev_ops, get_die_id(dev_ops, block_id));
+
 	cmd.cmd = CMD_ERASE_BLK;
 	cmd.n_addr = 3;
-	cmd.addr[1] = (u8)((row & 0xff00) >> 8);
-	cmd.addr[2] = (u8)(row & 0x00ff);
+	dev_ops->spinand_erase_blk(&cmd, block_id);
 
 	return spinand_cmd(spi_nand, &cmd);
 }
@@ -609,7 +985,11 @@
 	int retval;
 	u8 status = 0;
 
-	retval = spinand_write_enable(spi_nand);
+	retval = spinand_write_config(spi_nand, CMD_WR_ENABLE);
+	if (retval < 0) {
+		dev_err(&spi_nand->dev, "write enable failed!!\n");
+		return retval;
+	}
 	if (wait_till_ready(spi_nand))
 		dev_err(&spi_nand->dev, "wait timedout!!!\n");
 
@@ -631,6 +1011,13 @@
 			break;
 		}
 	}
+	retval = spinand_write_config(spi_nand, CMD_WR_DISABLE);
+	if (retval < 0) {
+		dev_err(&spi_nand->dev, "write disable failed!!\n");
+		return retval;
+	}
+	if (wait_till_ready(spi_nand))
+		dev_err(&spi_nand->dev, "wait timedout!!!\n");
 	return 0;
 }
 
@@ -653,13 +1040,17 @@
 				   u8 *buf, int oob_required, int page)
 {
 	int retval;
-	u8 status;
+	u8 status = 0;
 	u8 *p = buf;
 	int eccsize = chip->ecc.size;
 	int eccsteps = chip->ecc.steps;
 	struct spinand_info *info = nand_get_controller_data(chip);
+	struct spinand_ops *dev_ops = info->dev_ops;
+	struct spinand_state *state = info->priv;
 
 	enable_read_hw_ecc = 1;
+	spinand_read_page(info->spi, page, state->col,
+		(mtd->writesize + mtd->oobsize), state->buf);
 
 	chip->read_buf(mtd, p, eccsize * eccsteps);
 	if (oob_required)
@@ -674,15 +1065,32 @@
 		}
 
 		if ((status & STATUS_OIP_MASK) == STATUS_READY) {
-			if ((status & STATUS_ECC_MASK) == STATUS_ECC_ERROR) {
+			retval = dev_ops->spinand_verify_ecc(status);
+			if (retval == SPINAND_ECC_ERROR) {
 				pr_info("spinand: ECC error\n");
 				mtd->ecc_stats.failed++;
-			} else if ((status & STATUS_ECC_MASK) ==
-					STATUS_ECC_1BIT_CORRECTED)
+				retval = -EBADMSG;
+			} else if (retval == SPINAND_ECC_CORRECTED) {
 				mtd->ecc_stats.corrected++;
+				retval = -EUCLEAN;
+			}
 			break;
 		}
 	}
+	return retval;
+}
+
+static int spinand_read_page_raw(struct mtd_info *mtd, struct nand_chip *chip,
+			      uint8_t *buf, int oob_required, int page)
+{
+	struct spinand_info *info = nand_get_controller_data(chip);
+	struct spinand_state *state = info->priv;
+
+	spinand_read_page(info->spi, page, state->col,
+		(mtd->writesize + mtd->oobsize), state->buf);
+	chip->read_buf(mtd, buf, mtd->writesize);
+	if (oob_required)
+		chip->read_buf(mtd, chip->oob_poi, mtd->oobsize);
 	return 0;
 }
 #endif
@@ -707,7 +1115,7 @@
 
 	unsigned long timeo = jiffies;
 	int retval, state = chip->state;
-	u8 status;
+	u8 status = 0;
 
 	if (state == FL_ERASING)
 		timeo += (HZ * 400) / 1000;
@@ -778,13 +1186,15 @@
 	 */
 	case NAND_CMD_READ1:
 	case NAND_CMD_READ0:
+		state->col = column;
+		state->row = page;
 		state->buf_ptr = 0;
-		spinand_read_page(info->spi, page, 0x0, 0x840, state->buf);
 		break;
 	/* READOOB reads only the OOB because no ECC is performed. */
 	case NAND_CMD_READOOB:
 		state->buf_ptr = 0;
-		spinand_read_page(info->spi, page, 0x800, 0x40, state->buf);
+		spinand_read_page(info->spi, page, (mtd->writesize + column),
+				  mtd->oobsize, state->buf);
 		break;
 	case NAND_CMD_RNDOUT:
 		state->buf_ptr = column;
@@ -909,6 +1319,7 @@
 	chip->ecc.strength = 1;
 	chip->ecc.total	= chip->ecc.steps * chip->ecc.bytes;
 	chip->ecc.read_page = spinand_read_page_hwecc;
+	chip->ecc.read_page_raw = spinand_read_page_raw;
 	chip->ecc.write_page = spinand_write_page_hwecc;
 #else
 	chip->ecc.mode	= NAND_ECC_SOFT;
@@ -934,6 +1345,7 @@
 
 	dev_set_drvdata(&spi_nand->dev, mtd);
 
+	mtd->priv = chip;
 	mtd->dev.parent = &spi_nand->dev;
 	mtd->oobsize = 64;
 #ifdef CONFIG_MTD_SPINAND_ONDIEECC
--- /dev/null	2019-07-02 14:38:47.382882303 +0300
+++ b/drivers/staging/mt29f_spinand/giga_spinand.c	2019-07-17 14:01:37.231197062 +0300
@@ -0,0 +1,231 @@
+/* Copyright (c) 2015, The Linux Foundation. All rights reserved.
+ *
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/partitions.h>
+#include <linux/mtd/rawnand.h>
+#include <linux/spi/spi.h>
+#include "giga_spinand.h"
+
+void gigadevice_set_defaults(struct spi_device *spi_nand)
+{
+	struct mtd_info *mtd = (struct mtd_info *)dev_get_drvdata
+						(&spi_nand->dev);
+	struct nand_chip *chip = (struct nand_chip *)mtd->priv;
+
+	chip->ecc.size	= 0x800;
+	chip->ecc.bytes	= 0x0;
+	chip->ecc.steps	= 0x0;
+
+	chip->ecc.strength = 1;
+	chip->ecc.total	= 0;
+}
+
+void gigadevice_set_defaults_512mb(struct spi_device *spi_nand)
+{
+	struct mtd_info *mtd = (struct mtd_info *)dev_get_drvdata
+						(&spi_nand->dev);
+	struct nand_chip *chip = (struct nand_chip *)mtd->priv;
+
+	chip->ecc.size	= 0x1000;
+	chip->ecc.bytes	= 0x0;
+	chip->ecc.steps	= 0x0;
+
+	chip->ecc.strength = 1;
+	chip->ecc.total	= 0;
+}
+
+void gigadevice_read_cmd(struct spinand_cmd *cmd, u32 page_id)
+{
+	cmd->addr[0] = (u8)(page_id >> 16);
+	cmd->addr[1] = (u8)(page_id >> 8);
+	cmd->addr[2] = (u8)(page_id);
+}
+
+void gigadevice_read_data(struct spinand_cmd *cmd, u16 column, u32 page_id)
+{
+	cmd->addr[0] = 0xff; /*dummy byte*/
+	cmd->addr[1] = (u8)(column >> 8);
+	cmd->addr[2] = (u8)(column);
+}
+
+void macronix_read_data(struct spinand_cmd *cmd, u16 column, u32 page_id)
+{
+	cmd->addr[0] = ((u8)(column >> 8) & MACRONIX_NORM_RW_MASK);
+	cmd->addr[1] = (u8)(column);
+}
+
+void winbond_read_data(struct spinand_cmd *cmd, u16 column, u32 page_id)
+{
+	cmd->addr[0] = (u8)(column >> 8);
+	cmd->addr[1] = (u8)(column);
+}
+
+void gigadevice_write_cmd(struct spinand_cmd *cmd, u32 page_id)
+{
+	cmd->addr[0] = (u8)(page_id >> 16);
+	cmd->addr[1] = (u8)(page_id >> 8);
+	cmd->addr[2] = (u8)(page_id);
+}
+
+void gigadevice_write_data(struct spinand_cmd *cmd, u16 column, u32 page_id)
+{
+	cmd->addr[0] = (u8)(column >> 8);
+	cmd->addr[1] = (u8)(column);
+}
+
+void macronix_write_data(struct spinand_cmd *cmd, u16 column, u32 page_id)
+{
+	cmd->addr[0] = ((u8)(column >> 8) & MACRONIX_NORM_RW_MASK);
+	cmd->addr[1] = (u8)(column);
+}
+
+void winbond_write_data(struct spinand_cmd *cmd, u16 column, u32 page_id)
+{
+	cmd->addr[0] = (u8)(column >> 8);
+	cmd->addr[1] = (u8)(column);
+}
+
+void gigadevice_erase_blk(struct spinand_cmd *cmd, u32 page_id)
+{
+	cmd->addr[0] = (u8)(page_id >> 16);
+	cmd->addr[1] = (u8)(page_id >> 8);
+	cmd->addr[2] = (u8)(page_id);
+}
+
+int gigadevice_verify_ecc(u8 status)
+{
+	int ecc_status = (status & STATUS_ECC_MASK_GIGA);
+
+	if (ecc_status == STATUS_ECC_ERROR_GIGA)
+		return SPINAND_ECC_ERROR;
+	else if (ecc_status >= STATUS_ECC_BF_THRESHOLD_GIGA)
+		return SPINAND_ECC_CORRECTED;
+	else
+		return 0;
+}
+
+int xtx_verify_ecc(u8 status)
+{
+	int ecc_status = (status & STATUS_ECC_MASK_XTX);
+
+	if (ecc_status >= STATUS_ECC_ERROR_XTX)
+		return SPINAND_ECC_ERROR;
+	else if (ecc_status >= STATUS_ECC_BF_THRESHOLD_XTX)
+		return SPINAND_ECC_CORRECTED;
+	else
+		return 0;
+}
+
+int macronix_verify_ecc(u8 status)
+{
+	int ecc_status = (status & STATUS_ECC_MASK_MACRONIX);
+
+	if ((ecc_status == STATUS_ECC_ERROR_MACRONIX) ||
+	    (ecc_status == STATUS_ECC_MASK_MACRONIX))
+		return SPINAND_ECC_ERROR;
+	else if (ecc_status)
+		return SPINAND_ECC_CORRECTED;
+	else
+		return 0;
+}
+
+int dummy_verify_ecc(u8 status)
+{
+	return 0;
+}
+
+int gigadevice_parse_id(struct spi_device *spi_nand,
+			struct spinand_ops *ops, u8 *nand_id, u8 *id)
+{
+	if (nand_id[0] != NAND_MFR_GIGA && nand_id[0] != NAND_MFR_ATO)
+		return -EINVAL;
+
+	if (!(nand_id[0] == NAND_MFR_GIGA && nand_id[1] == ops->dev_id))
+		return -EINVAL;
+
+	id[0] = nand_id[0];
+	id[1] = nand_id[1];
+
+	return 0;
+}
+
+
+int gigadevice_2G_parse_id(struct spi_device *spi_nand,
+			struct spinand_ops *ops, u8 *nand_id, u8 *id)
+{
+	if (nand_id[1] != NAND_MFR_GIGA && nand_id[1] != NAND_MFR_ATO)
+		return -EINVAL;
+
+	if (!(nand_id[1] == NAND_MFR_GIGA && nand_id[2] == ops->dev_id))
+		return -EINVAL;
+
+	id[0] = nand_id[1];
+	id[1] = nand_id[2];
+
+	return 0;
+}
+
+int xtx_parse_id(struct spi_device *spi_nand,
+		struct spinand_ops *ops, u8 *nand_id, u8 *id)
+{
+	if (nand_id[1] != NAND_MFR_XTX)
+		return -EINVAL;
+
+	if (!(nand_id[1] == NAND_MFR_XTX && nand_id[2] == ops->dev_id))
+		return -EINVAL;
+
+	id[0] = nand_id[1];
+	id[1] = nand_id[2];
+
+	return 0;
+}
+
+int fudan_parse_id(struct spi_device *spi_nand,
+		struct spinand_ops *ops, u8 *nand_id, u8 *id)
+{
+	if (nand_id[1] != NAND_MFR_FUDAN)
+		return -EINVAL;
+
+	if (!(nand_id[1] == NAND_MFR_FUDAN && nand_id[2] == ops->dev_id))
+		return -EINVAL;
+
+	id[0] = nand_id[1];
+	id[1] = nand_id[2];
+
+	return 0;
+}
+
+int macronix_parse_id(struct spi_device *spi_nand,
+		      struct spinand_ops *ops, u8 *nand_id, u8 *id)
+{
+	if (nand_id[1] != NAND_MFR_MACRONIX)
+		return -EINVAL;
+
+	return 0;
+}
+
+int winbond_parse_id(struct spi_device *spi_nand,
+		     struct spinand_ops *ops, u8 *nand_id, u8 *id)
+{
+	if (!(nand_id[1] == NAND_MFR_WINBOND && nand_id[2] == ops->dev_id))
+		return -EINVAL;
+
+	return 0;
+}
+
+MODULE_DESCRIPTION("SPI NAND driver for Gigadevice and Macronix");
--- /dev/null	2019-07-02 14:38:47.382882303 +0300
+++ b/drivers/staging/mt29f_spinand/giga_spinand.h	2019-07-01 13:38:11.767351000 +0300
@@ -0,0 +1,75 @@
+
+/* Copyright (c) 2015, The Linux Foundation. All rights reserved.
+ *
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ *
+ */
+
+#ifndef __GIGA_SPI_NAND_H
+#define __GIGA__SPI_NAND_H
+
+#include "mt29f_spinand.h"
+
+void gigadevice_set_defaults(struct spi_device *spi_nand);
+void gigadevice_set_defaults_512mb(struct spi_device *spi_nand);
+
+void gigadevice_read_cmd(struct spinand_cmd *cmd, u32 page_id);
+
+void gigadevice_read_data(struct spinand_cmd *cmd, u16 column, u32 page_id);
+
+void gigadevice_write_cmd(struct spinand_cmd *cmd, u32 column);
+
+void gigadevice_write_data(struct spinand_cmd *cmd, u16 column, u32 page_id);
+
+void gigadevice_erase_blk(struct spinand_cmd *cmd, u32 page_id);
+
+int gigadevice_parse_id(struct spi_device *spi_nand, struct spinand_ops *ops,
+			u8 *nand_id, u8 *id);
+
+int xtx_parse_id(struct spi_device *spi_nand, struct spinand_ops *ops,
+			u8 *nand_id, u8 *id);
+
+int fudan_parse_id(struct spi_device *spi_nand, struct spinand_ops *ops,
+			u8 *nand_id, u8 *id);
+
+int gigadevice_2G_parse_id(struct spi_device *spi_nand, struct spinand_ops *ops,
+			u8 *nand_id, u8 *id);
+
+int gigadevice_verify_ecc(u8 status);
+
+int dummy_verify_ecc(u8 status);
+
+void macronix_read_data(struct spinand_cmd *cmd, u16 column, u32 page_id);
+
+void macronix_write_data(struct spinand_cmd *cmd, u16 column, u32 page_id);
+
+int macronix_parse_id(struct spi_device *spi_nand, struct spinand_ops *ops,
+		      u8 *nand_id, u8 *id);
+
+int xtx_verify_ecc(u8 status);
+
+int macronix_verify_ecc(u8 status);
+
+void winbond_read_data(struct spinand_cmd *cmd, u16 column, u32 page_id);
+
+void winbond_write_data(struct spinand_cmd *cmd, u16 column, u32 page_id);
+
+int winbond_parse_id(struct spi_device *spi_nand, struct spinand_ops *ops,
+		     u8 *nand_id, u8 *id);
+
+int winbond_die_select(struct spi_device *spi_nand,
+		       struct spinand_ops *dev_ops, u8 die_id);
+
+/* Macronix Specific defines */
+#define MACRONIX_NORM_RW_MASK	0x0F
+#endif /* __GIGA_SPI_NAND_H */
