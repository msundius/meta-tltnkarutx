--- a/drivers/net/phy/ar40xx.c
+++ b/drivers/net/phy/ar40xx.c
@@ -31,6 +31,12 @@
 #include "ar40xx.h"
 
 static struct ar40xx_priv *ar40xx_priv;
+
+static qca8075_phy_medium_t last_phy_medium = QCA8075_PHY_MEDIUM_NULL;
+static int last_phydev_link_state = -1;
+static int copper_link = 0;
+static int fiber_link = 0;
+static int report_last_status = 0;
 
 #define MIB_DESC(_s , _o, _n)	\
 	{			\
@@ -1952,11 +1958,192 @@
 	return 0;
 }
 
+static int ar40xx_update_link(struct phy_device *phydev)
+{
+	int status;
+	qca8075_phy_medium_t phy_medium;
+
+	phy_medium = __phy_active_medium_get(phydev->mdio.bus, COMBO_PHY_ID);
+
+	if (phydev->drv && phydev->drv->update_link)
+		return phydev->drv->update_link(phydev);
+
+	/* Do a fake read */
+	status = phy_read(phydev, MII_BMSR);
+	if (status < 0)
+		return status;
+
+	/* Read link and autonegotiation status */
+	status = phy_read(phydev, MII_BMSR);
+	if (status < 0)
+		return status;
+
+	if ( report_last_status > 0 ) {
+		report_last_status = 0;
+		phydev->link = last_phydev_link_state;
+		return 0;
+	}
+	/* reporting copper/fiber link state to netdev */
+	if ((status & BMSR_LSTATUS) == 0) {
+		phydev->link = 0;
+		if (last_phy_medium == phy_medium) { /* medium not changed */
+			if(phydev->link != last_phydev_link_state)
+				report_last_status++;
+			if (phy_medium == QCA8075_PHY_MEDIUM_FIBER)
+				fiber_link = 0;
+			else
+				copper_link = 0;
+		} else { /* medium changed, check current medium*/
+			if (phy_medium == QCA8075_PHY_MEDIUM_FIBER) { /* fiber active*/
+				if (copper_link == 1) { /* copper active, but not preferred*/
+					if(phydev->link == last_phydev_link_state) {
+						phydev->link = !phydev->link; /* toggle link state */
+						report_last_status++;
+					}
+				}
+				fiber_link = 0;
+			} else { /* copper active*/
+				if (fiber_link == 1) { /* fiber active, preferred*/
+					if(phydev->link == last_phydev_link_state) {
+						phydev->link = !phydev->link; /* toggle link state */
+						report_last_status++;
+					}
+				}
+				copper_link = 0;
+			}
+		}
+	} else {
+		phydev->link = 1;
+		if (last_phy_medium == phy_medium){
+			if (phy_medium == QCA8075_PHY_MEDIUM_FIBER)
+				fiber_link = 1;
+			else
+				copper_link = 1;
+		}
+		else {
+			if (phy_medium == QCA8075_PHY_MEDIUM_FIBER) { /* fiber active*/
+				if (copper_link == 1) { /* copper active, but not preferred*/
+					if(phydev->link == last_phydev_link_state) {
+						phydev->link = !phydev->link;
+						report_last_status++;
+					}
+				}
+				fiber_link = 1;
+			} else { /* copper active*/
+				if (fiber_link == 1) { /* fiber active, preferred*/
+					if(phydev->link == last_phydev_link_state) {
+						phydev->link = !phydev->link;
+						report_last_status++;
+					}
+				}
+				copper_link = 1;
+			}
+		}
+	}
+
+	last_phy_medium = phy_medium;
+	last_phydev_link_state = phydev->link;
+
+	return 0;
+}
+
+static int ar40xx_read_status(struct phy_device *phydev)
+{
+	int adv;
+	int err;
+	int lpa;
+	int lpagb = 0;
+	int common_adv;
+	int common_adv_gb = 0;
+
+	/* Update the link, but return if there was an error */
+	err = ar40xx_update_link(phydev);
+	if (err)
+		return err;
+
+	phydev->lp_advertising = 0;
+
+	if (AUTONEG_ENABLE == phydev->autoneg) {
+		if (phydev->supported & (SUPPORTED_1000baseT_Half
+					| SUPPORTED_1000baseT_Full)) {
+			lpagb = phy_read(phydev, MII_STAT1000);
+			if (lpagb < 0)
+				return lpagb;
+
+			adv = phy_read(phydev, MII_CTRL1000);
+			if (adv < 0)
+				return adv;
+
+			phydev->lp_advertising =
+				mii_stat1000_to_ethtool_lpa_t(lpagb);
+			common_adv_gb = lpagb & adv << 2;
+		}
+
+		lpa = phy_read(phydev, MII_LPA);
+		if (lpa < 0)
+			return lpa;
+
+		phydev->lp_advertising |= mii_lpa_to_ethtool_lpa_t(lpa);
+
+		adv = phy_read(phydev, MII_ADVERTISE);
+		if (adv < 0)
+			return adv;
+
+		common_adv = lpa & adv;
+
+		phydev->speed = SPEED_10;
+		phydev->duplex = DUPLEX_HALF;
+		phydev->pause = 0;
+		phydev->asym_pause = 0;
+
+		if (common_adv_gb & (LPA_1000FULL | LPA_1000HALF)) {
+			phydev->speed = SPEED_1000;
+
+			if (common_adv_gb & LPA_1000FULL)
+				phydev->duplex = DUPLEX_FULL;
+		} else if (common_adv & (LPA_100FULL | LPA_100HALF)) {
+			phydev->speed = SPEED_100;
+
+			if (common_adv & LPA_100FULL)
+				phydev->duplex = DUPLEX_FULL;
+		} else
+			if (common_adv & LPA_10FULL)
+				phydev->duplex = DUPLEX_FULL;
+
+		if (phydev->duplex == DUPLEX_FULL) {
+			phydev->pause = lpa & LPA_PAUSE_CAP ? 1 : 0;
+			phydev->asym_pause = lpa & LPA_PAUSE_ASYM ? 1 : 0;
+		}
+	} else {
+		int bmcr = phy_read(phydev, MII_BMCR);
+
+		if (bmcr < 0)
+			return bmcr;
+
+		if (bmcr & BMCR_FULLDPLX)
+			phydev->duplex = DUPLEX_FULL;
+		else
+			phydev->duplex = DUPLEX_HALF;
+
+		if (bmcr & BMCR_SPEED1000)
+			phydev->speed = SPEED_1000;
+		else if (bmcr & BMCR_SPEED100)
+			phydev->speed = SPEED_100;
+		else
+			phydev->speed = SPEED_10;
+
+		phydev->pause = 0;
+		phydev->asym_pause = 0;
+	}
+
+	return 0;
+}
+
 static int
 ar40xx_phy_read_status(struct phy_device *phydev)
 {
 	if (phydev->mdio.addr != 0)
-		return genphy_read_status(phydev);
+		return ar40xx_read_status(phydev);
 
 	return 0;
 }
--- a/drivers/net/phy/ar40xx.h
+++ b/drivers/net/phy/ar40xx.h
@@ -300,6 +300,7 @@
 typedef enum {
 	QCA8075_PHY_MEDIUM_COPPER = 0,
 	QCA8075_PHY_MEDIUM_FIBER = 1, /**< Fiber */
+	QCA8075_PHY_MEDIUM_NULL = 2 /**< NULL */
 } qca8075_phy_medium_t;
 
 /* Phy pages */
